/*
 * This file is generated by jOOQ.
 */
package jooq.generated.elastic.crawler.aihub.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.generated.elastic.crawler.aihub.Aihub;
import jooq.generated.elastic.crawler.aihub.Indexes;
import jooq.generated.elastic.crawler.aihub.Keys;
import jooq.generated.elastic.crawler.aihub.enums.SolutionIsDelete;
import jooq.generated.elastic.crawler.aihub.tables.records.SolutionRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 解決方案
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Solution extends TableImpl<SolutionRecord> {

    private static final long serialVersionUID = 558178329;

    /**
     * The reference instance of <code>aihub.solution</code>
     */
    public static final Solution SOLUTION = new Solution();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SolutionRecord> getRecordType() {
        return SolutionRecord.class;
    }

    /**
     * The column <code>aihub.solution.id</code>.
     */
    public final TableField<SolutionRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>aihub.solution.name</code>. 技術產品名
     */
    public final TableField<SolutionRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "技術產品名");

    /**
     * The column <code>aihub.solution.solutionId</code>. 解決方案id
     */
    public final TableField<SolutionRecord, String> SOLUTIONID = createField("solutionId", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "解決方案id");

    /**
     * The column <code>aihub.solution.vender_id</code>. 廠商id
     */
    public final TableField<SolutionRecord, String> VENDER_ID = createField("vender_id", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "廠商id");

    /**
     * The column <code>aihub.solution.introduction</code>. 簡介內文
     */
    public final TableField<SolutionRecord, String> INTRODUCTION = createField("introduction", org.jooq.impl.SQLDataType.CLOB, this, "簡介內文");

    /**
     * The column <code>aihub.solution.contact_email</code>. 聯絡 email
     */
    public final TableField<SolutionRecord, String> CONTACT_EMAIL = createField("contact_email", org.jooq.impl.SQLDataType.VARCHAR(200), this, "聯絡 email");

    /**
     * The column <code>aihub.solution.contact_tel</code>. 聯絡電話
     */
    public final TableField<SolutionRecord, String> CONTACT_TEL = createField("contact_tel", org.jooq.impl.SQLDataType.VARCHAR(20), this, "聯絡電話");

    /**
     * The column <code>aihub.solution.img_url</code>. 代表圖連結
     */
    public final TableField<SolutionRecord, String> IMG_URL = createField("img_url", org.jooq.impl.SQLDataType.VARCHAR(200), this, "代表圖連結");

    /**
     * The column <code>aihub.solution.created</code>.
     */
    public final TableField<SolutionRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>aihub.solution.updated</code>.
     */
    public final TableField<SolutionRecord, Timestamp> UPDATED = createField("updated", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>aihub.solution.is_delete</code>.
     */
    public final TableField<SolutionRecord, SolutionIsDelete> IS_DELETE = createField("is_delete", org.jooq.impl.SQLDataType.VARCHAR(1).nullable(false).defaultValue(org.jooq.impl.DSL.field("N", org.jooq.impl.SQLDataType.VARCHAR)).asEnumDataType(jooq.generated.elastic.crawler.aihub.enums.SolutionIsDelete.class), this, "");

    /**
     * Create a <code>aihub.solution</code> table reference
     */
    public Solution() {
        this(DSL.name("solution"), null);
    }

    /**
     * Create an aliased <code>aihub.solution</code> table reference
     */
    public Solution(String alias) {
        this(DSL.name(alias), SOLUTION);
    }

    /**
     * Create an aliased <code>aihub.solution</code> table reference
     */
    public Solution(Name alias) {
        this(alias, SOLUTION);
    }

    private Solution(Name alias, Table<SolutionRecord> aliased) {
        this(alias, aliased, null);
    }

    private Solution(Name alias, Table<SolutionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("解決方案"));
    }

    public <O extends Record> Solution(Table<O> child, ForeignKey<O, SolutionRecord> key) {
        super(child, key, SOLUTION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Aihub.AIHUB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SOLUTION_PRIMARY, Indexes.SOLUTION_SOLUTIONID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<SolutionRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SOLUTION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SolutionRecord> getPrimaryKey() {
        return Keys.KEY_SOLUTION_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SolutionRecord>> getKeys() {
        return Arrays.<UniqueKey<SolutionRecord>>asList(Keys.KEY_SOLUTION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Solution as(String alias) {
        return new Solution(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Solution as(Name alias) {
        return new Solution(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Solution rename(String name) {
        return new Solution(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Solution rename(Name name) {
        return new Solution(name, null);
    }
}
