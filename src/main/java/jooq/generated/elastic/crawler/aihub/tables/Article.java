/*
 * This file is generated by jOOQ.
 */
package jooq.generated.elastic.crawler.aihub.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.generated.elastic.crawler.aihub.Aihub;
import jooq.generated.elastic.crawler.aihub.Indexes;
import jooq.generated.elastic.crawler.aihub.Keys;
import jooq.generated.elastic.crawler.aihub.enums.ArticleIsDelete;
import jooq.generated.elastic.crawler.aihub.enums.ArticleIsDisplay;
import jooq.generated.elastic.crawler.aihub.enums.ArticleType;
import jooq.generated.elastic.crawler.aihub.tables.records.ArticleRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Article extends TableImpl<ArticleRecord> {

    private static final long serialVersionUID = 583578159;

    /**
     * The reference instance of <code>aihub.article</code>
     */
    public static final Article ARTICLE = new Article();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ArticleRecord> getRecordType() {
        return ArticleRecord.class;
    }

    /**
     * The column <code>aihub.article.id</code>.
     */
    public final TableField<ArticleRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>aihub.article.data_id</code>. data id
     */
    public final TableField<ArticleRecord, String> DATA_ID = createField("data_id", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "data id");

    /**
     * The column <code>aihub.article.url</code>. 文章網址
     */
    public final TableField<ArticleRecord, String> URL = createField("url", org.jooq.impl.SQLDataType.VARCHAR(200), this, "文章網址");

    /**
     * The column <code>aihub.article.title</code>. 文章抬頭
     */
    public final TableField<ArticleRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "文章抬頭");

    /**
     * The column <code>aihub.article.author</code>. 作者
     */
    public final TableField<ArticleRecord, String> AUTHOR = createField("author", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "作者");

    /**
     * The column <code>aihub.article.author_id</code>. 作者id
     */
    public final TableField<ArticleRecord, Integer> AUTHOR_ID = createField("author_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "作者id");

    /**
     * The column <code>aihub.article.content</code>. 內容
     */
    public final TableField<ArticleRecord, String> CONTENT = createField("content", org.jooq.impl.SQLDataType.CLOB, this, "內容");

    /**
     * The column <code>aihub.article.member_id</code>. 編輯者 id
     */
    public final TableField<ArticleRecord, String> MEMBER_ID = createField("member_id", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "編輯者 id");

    /**
     * The column <code>aihub.article.type</code>. 類型
     */
    public final TableField<ArticleRecord, ArticleType> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR(7).nullable(false).asEnumDataType(jooq.generated.elastic.crawler.aihub.enums.ArticleType.class), this, "類型");

    /**
     * The column <code>aihub.article.publish_datetime</code>. 發布時間
     */
    public final TableField<ArticleRecord, Timestamp> PUBLISH_DATETIME = createField("publish_datetime", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "發布時間");

    /**
     * The column <code>aihub.article.created</code>. 建立時間
     */
    public final TableField<ArticleRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "建立時間");

    /**
     * The column <code>aihub.article.updated</code>. 異動時間
     */
    public final TableField<ArticleRecord, Timestamp> UPDATED = createField("updated", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "異動時間");

    /**
     * The column <code>aihub.article.is_display</code>. 上下架
     */
    public final TableField<ArticleRecord, ArticleIsDisplay> IS_DISPLAY = createField("is_display", org.jooq.impl.SQLDataType.VARCHAR(1).nullable(false).asEnumDataType(jooq.generated.elastic.crawler.aihub.enums.ArticleIsDisplay.class), this, "上下架");

    /**
     * The column <code>aihub.article.img_url</code>. 首圖 url
     */
    public final TableField<ArticleRecord, String> IMG_URL = createField("img_url", org.jooq.impl.SQLDataType.VARCHAR(200), this, "首圖 url");

    /**
     * The column <code>aihub.article.is_delete</code>.
     */
    public final TableField<ArticleRecord, ArticleIsDelete> IS_DELETE = createField("is_delete", org.jooq.impl.SQLDataType.VARCHAR(1).nullable(false).defaultValue(org.jooq.impl.DSL.field("N", org.jooq.impl.SQLDataType.VARCHAR)).asEnumDataType(jooq.generated.elastic.crawler.aihub.enums.ArticleIsDelete.class), this, "");

    /**
     * Create a <code>aihub.article</code> table reference
     */
    public Article() {
        this(DSL.name("article"), null);
    }

    /**
     * Create an aliased <code>aihub.article</code> table reference
     */
    public Article(String alias) {
        this(DSL.name(alias), ARTICLE);
    }

    /**
     * Create an aliased <code>aihub.article</code> table reference
     */
    public Article(Name alias) {
        this(alias, ARTICLE);
    }

    private Article(Name alias, Table<ArticleRecord> aliased) {
        this(alias, aliased, null);
    }

    private Article(Name alias, Table<ArticleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Article(Table<O> child, ForeignKey<O, ArticleRecord> key) {
        super(child, key, ARTICLE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Aihub.AIHUB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ARTICLE_AUTHOR, Indexes.ARTICLE_DATA_ID, Indexes.ARTICLE_PRIMARY, Indexes.ARTICLE_TITLE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ArticleRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ARTICLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ArticleRecord> getPrimaryKey() {
        return Keys.KEY_ARTICLE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ArticleRecord>> getKeys() {
        return Arrays.<UniqueKey<ArticleRecord>>asList(Keys.KEY_ARTICLE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Article as(String alias) {
        return new Article(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Article as(Name alias) {
        return new Article(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Article rename(String name) {
        return new Article(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Article rename(Name name) {
        return new Article(name, null);
    }
}
